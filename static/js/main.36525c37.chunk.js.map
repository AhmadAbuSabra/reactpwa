{"version":3,"sources":["logo.svg","App.js","serviceWorkerRegistration.js","index.js"],"names":["App","_jsx","className","children","_jsxs","src","logo","alt","href","target","rel","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","console","isLocalhost","Boolean","window","location","hostname","match","ReactDOM","createRoot","document","getElementById","render","React","StrictMode","URL","process","origin","addEventListener","concat","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","log","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"gNAAe,G,MAAA,IAA0B,kC,eCwB1BA,MArBf,WACE,OACEC,cAAA,OAAKC,UAAU,MAAKC,SAClBC,eAAA,UAAQF,UAAU,aAAYC,SAAA,CAC5BF,cAAA,OAAKI,IAAKC,EAAMJ,UAAU,WAAWK,IAAI,SACzCH,eAAA,KAAAD,SAAA,CAAG,QACIF,cAAA,QAAAE,SAAM,eAAiB,0BAE9BF,cAAA,KACEC,UAAU,WACVM,KAAK,sBACLC,OAAO,SACPC,IAAI,sBAAqBP,SAC1B,oBAMT,ECCE,SAASQ,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WACtBX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASP,GAGdL,GAAUA,EAAOa,WACnBb,EAAOa,UAAUR,GAIzB,EACF,CACF,IACCS,OAAM,SAAAC,GACLC,QAAQD,MAAM,4CAA6CA,EAC7D,GACJ,CA0BA,IAAME,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UACe,UAA7BF,OAAOC,SAASC,UAChBF,OAAOC,SAASC,SAASC,MAAM,2DCvExBC,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHvC,cAACwC,IAAMC,WAAU,CAAAvC,SACfF,cAACD,EAAG,ODVD,SAAkBa,GACrB,GAA6C,kBAAmBC,UAAW,CAEzE,GADkB,IAAI6B,IAAIC,YAAwBZ,OAAOC,SAASzB,MACpDqC,SAAWb,OAAOC,SAASY,OACvC,OAGFb,OAAOc,iBAAiB,QAAQ,WAC9B,IAAMlC,EAAK,GAAAmC,OAAMH,YAAsB,sBAEnCd,IAyCV,SAAiClB,EAAOC,GACtCmC,MAAMpC,EAAO,CACXqC,QAAS,CAAE,iBAAkB,YAE5BhC,MAAK,SAAAiC,GACJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAE5CxC,UAAUC,cAAcwC,MAAMtC,MAAK,SAAAC,GACjCA,EAAasC,aAAavC,MAAK,WAC7Be,OAAOC,SAASwB,QAClB,GACF,IAEA9C,EAAgBC,EAAOC,EAE3B,IACCc,OAAM,WACLE,QAAQ6B,IAAI,gEACd,GACJ,CA9DQC,CAAwB/C,EAAOC,GAC/BC,UAAUC,cAAcwC,MAAMtC,MAAK,WACjCY,QAAQ6B,IAAI,gEACd,KAEA/C,EAAgBC,EAAOC,EAE3B,GACF,CACF,CCHF+C,E","file":"static/js/main.36525c37.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// serviceWorkerRegistration.js\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          checkValidServiceWorker(swUrl, config);\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log('This web app is being served cache-first by a service worker.');\r\n          });\r\n        } else {\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log('No internet connection found. App is running in offline mode.');\r\n      });\r\n  }\r\n  \r\n  const isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      window.location.hostname === '[::1]' ||\r\n      window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n  );\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nserviceWorkerRegistration.register();\n\n"],"sourceRoot":""}